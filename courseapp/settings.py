"""
Django settings for courseapp project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import secrets
SECRET_KEY = secrets.token_urlsafe(64)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# os.environ.get('DEBUG', 'False').lower() == 'true'

load_dotenv(os.path.join(BASE_DIR, '.env'))

if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

ALLOWED_HOSTS = ['*']
APPEND_SLASH=True
CORS_ALLOW_CREDENTIALS = True
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', 
    
    #Third-party apps
   'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'corsheaders',
    'django_celery_beat',
    'drf_yasg',
    
    # Local apps
    'core',
    
]


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        },
        'Google OAuth2': {
            'type': 'oauth2',
            'flow': 'implicit',
            'authorizationUrl': 'https://accounts.google.com/o/oauth2/auth',
            'scopes': {
                'email': 'Email access',
                'profile': 'Profile access'
            }
        }
    },
    'USE_SESSION_AUTH': False,
    'PERSIST_AUTH': True,
    'REFETCH_SCHEMA_WITH_AUTH': False,
    'REFETCH_SCHEMA_ON_LOGOUT': True,
    'DEFAULT_MODEL_RENDERING': 'model',
    'SCHEMES': ['http', 'https'],
}

if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
ACCOUNT_SIGNUP_FIELDS = {
    'username': {
        'required': False,
    },
    'email': {
        'required': True,
    },
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',
     'django.middleware.gzip.GZipMiddleware',
]

AUTHENTICATION_BACKENDS = [
   'core.auth_backends.EmailBackend',  # Your custom email backend
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'allauth.account.auth_backends.AuthenticationBackend',  # AllAuth backend
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
      'PAGE_SIZE': 25,
    'PAGINATE_BY_PARAM': 'page_size',
    'MAX_PAGINATE_BY': 100,
}

SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none' 
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_SIGNUP_FIELDS = {
    'email': {'required': True, 'key': True},
    'password1': {'required': True, 'key': False},
    'password2': {'required': True, 'key': False}
}

FIREBASE_CREDENTIALS_PATH = os.path.join(BASE_DIR, 'firebase-credentials.json')
ACCOUNT_USER_MODEL_USERNAME_FIELD   = None
ACCOUNT_ADAPTER = 'core.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'core.adapters.CustomSocialAccountAdapter'


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'YOUR_GOOGLE_CLIENT_ID',
            'secret': 'YOUR_GOOGLE_CLIENT_SECRET',
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.your-email-provider.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your-email@example.com'
EMAIL_HOST_PASSWORD = 'your-email-password'

AUTH_USER_MODEL = 'core.User'


REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'core.serializers.UserSerializer',
    'REGISTER_SERIALIZER': 'core.serializers.CustomRegisterSerializer',
    'LOGIN_SERIALIZER': 'core.serializers.CustomLoginSerializer',  # Add this line
    'TOKEN_SERIALIZER': 'core.serializers.CustomTokenSerializer',
}
ROOT_URLCONF = 'courseapp.urls'

ROOT_URLCONF = 'courseapp.urls'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


CELERY_BROKER_URL = os.environ.get('REDIS_URL')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# Celery Beat schedule
CELERY_BEAT_SCHEDULE = {
    'send_subscription_expiry_reminder': {
        'task': 'core.tasks.send_subscription_expiry_reminder',
        'schedule': crontab(hour=9, minute=0),  # Run daily at 9 AM
    },
    'pre-warm-duration-caches': {
        'task': 'core.tasks.pre_warm_duration_caches',
        'schedule': crontab(hour=3, minute=0),  # 3 AM daily
    },
    'regenerate-presigned-urls': {
        'task': 'core.tasks.regenerate_all_presigned_urls',
        'schedule': crontab(hour=23, minute=50),  # 11:50 PM daily
    },
    'cleanup-expired-urls': {
        'task': 'core.tasks.cleanup_expired_presigned_urls',
        'schedule': crontab(minute=0, hour='*/6'),  # Every 6 hours
    },
    'monitor-failed-generations': {
        'task': 'core.tasks.monitor_failed_url_generations',
        'schedule': crontab(minute=30),  # Every hour at 30 minutes
    },
    
     'clear-stale-caches': {
        'task': 'core.tasks.clear_stale_caches',
        'schedule': crontab(minute=0, hour='*/4'),  # Every 4 hours
    },
    
    # Your existing schedules...
    'send-subscription-expiry-reminder': {
        'task': 'core.tasks.send_subscription_expiry_reminder',
        'schedule': crontab(hour=9, minute=0),
    },
    
    'deactivate-expired-subscriptions': {
        'task': 'core.tasks.deactivate_expired_subscriptions',
        'schedule': crontab(hour=0, minute=30),
    },
    
    'cleanup-expired-otps': {
        'task': 'core.tasks.cleanup_expired_otps',
        'schedule': crontab(hour=2, minute=0),
    },
    'deactivate_expired_subscriptions': {
        'task': 'core.tasks.deactivate_expired_subscriptions',
        'schedule': crontab(hour=0, minute=0),  # Run daily at midnight
    },
    'generate_admin_metrics_report': {
        'task': 'core.tasks.generate_admin_metrics_report',
        'schedule': crontab(day_of_week='monday', hour=7, minute=0),  # Weekly on Monday at 7 AM
    },
    'cleanup_expired_otps': {
        'task': 'core.tasks.cleanup_expired_otps',
        'schedule': crontab(hour='*/3', minute=0),  # Run every 3 hours
    },
}

CELERY_TASK_ANNOTATIONS = {
    'core.tasks.generate_presigned_url_async': {'rate_limit': '100/m'},
    'core.tasks.send_push_notification': {'rate_limit': '1000/m'},
}

CELERY_TASK_ROUTES = {
    'core.tasks.generate_presigned_url_async': {
        'queue': 'url_generation',
        'routing_key': 'url_generation',
    },
    'core.tasks.regenerate_all_presigned_urls': {
        'queue': 'bulk_operations',
        'routing_key': 'bulk_operations',
    },
    'core.tasks.send_push_notification': {
        'queue': 'notifications',
        'routing_key': 'notifications',
    }
}


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'courseapp.wsgi.application'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'IGNORE_EXCEPTIONS': True,
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 100,  # Increased for high traffic
                'retry_on_timeout': True,
                'health_check_interval': 30,
            },
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        },
        'KEY_PREFIX': 'courseapp',
        'TIMEOUT': 3600,  # 1 hour default
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'sessions',
    }
}


SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'

LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '3306'),
        'CONN_MAX_AGE': 3600,  # 10 minutes
          'MAX_CONNS': 20,
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'sql_mode': 'STRICT_TRANS_TABLES',
            # Connection pool settings
          'isolation_level': 'read committed',
        
           
        },
    }
}


CACHES['default']['TIMEOUT'] = 7200  # 2 hours
CACHES['default']['OPTIONS']['CONNECTION_POOL_KWARGS']['max_connections'] = 100

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
RAZORPAY_KEY_ID = os.environ.get('RAZORPAY_KEY_ID')  # Replace with your key
RAZORPAY_KEY_SECRET = os.environ.get('RAZORPAY_KEY_SECRET')   # Replace with your secret
RAZORPAY_CURRENCY = 'INR'     
RAZORPAY_WEBHOOK_SECRET= os.environ.get('RAZORPAY_WEBHOOK_SECRET')  # Replace with your webhook secret

# Payment Link Configuration
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')
SUPPORT_EMAIL = os.environ.get('SUPPORT_EMAIL', 'support@yourapp.com')

# Email Configuration for Payment Links
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'your-email@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'your-app-password')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@bybhavani.com')

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")  # Replace with your actual access key
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")  # Replace with your actual secret key
AWS_REGION = os.environ.get("AWS_REGION")  # Replace with your actual AWS region

AWS_DEFAULT_ACL = 'private'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
# S3 URL Expiration Setting (in seconds)
S3_URL_EXPIRATION = 86400  # 1 hour

FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        's3_handler': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 's3_operations.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.views': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.s3_utils': {
            'handlers': ['s3_handler'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}