name: Deploy with Migration Fix

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mysqlclient

      - name: Verify MySQL client
        run: |
          python -c "import MySQLdb; print('âœ… MySQL client working')"

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}" >> .env
          echo "RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}" >> .env
          echo "RAZORPAY_CURRENCY=INR" >> .env

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Run tests
        run: python manage.py test

      - name: Deploy to server
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "ðŸš€ Deploying to production server..."

          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

          # Deploy code to server
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.env' \
            --exclude='logs' \
            --exclude='media' \
            --exclude='static' \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/bhavani/

          echo "âœ… Code deployed successfully!"

      - name: Run deployment script on server
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "ðŸ”§ Running deployment script on server..."

          # Run the deployment script on the server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /var/www/bhavani
            chmod +x deploy.sh
            ./deploy.sh
          EOF

          echo "âœ… Deployment script completed!"

      - name: Restart services
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "ðŸ”„ Restarting services..."

          # Restart services on server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            sudo systemctl restart redis-server
            
            # Restart supervisor if available
            if command -v supervisorctl &> /dev/null; then
              sudo supervisorctl restart courseapp:* || echo "Supervisor not configured"
            fi
            
            # Restart gunicorn if running as systemd service
            sudo systemctl restart gunicorn || echo "Gunicorn not running as systemd service"
            
            # Restart nginx
            sudo systemctl restart nginx || echo "Nginx restart failed"
          EOF

          echo "âœ… Services restarted successfully!"
