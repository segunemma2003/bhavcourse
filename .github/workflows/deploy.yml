name: Deploy with Migration Fix

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mysqlclient

      - name: Verify MySQL client
        run: |
          python -c "import MySQLdb; print('✅ MySQL client working')"

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}" >> .env
          echo "RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}" >> .env
          echo "RAZORPAY_CURRENCY=INR" >> .env

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Run tests
        run: python manage.py test

      - name: Setup SSH
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🔧 Setting up SSH for deployment..."

          # Debug: Check if secrets are available
          echo "Checking deployment secrets..."
          if [ -n "${{ secrets.SERVER_HOST }}" ]; then
            echo "✅ SERVER_HOST is set"
          else
            echo "❌ SERVER_HOST is not set"
          fi

          if [ -n "${{ secrets.SERVER_USER }}" ]; then
            echo "✅ SERVER_USER is set"
          else
            echo "❌ SERVER_USER is not set"
          fi

          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "✅ SSH_PRIVATE_KEY is set"
          else
            echo "❌ SSH_PRIVATE_KEY is not set"
          fi

          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add server to known hosts with error handling
          if [ -n "${{ secrets.SERVER_HOST }}" ]; then
            echo "Adding ${{ secrets.SERVER_HOST }} to known hosts..."
            ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Could not add host to known_hosts"
          else
            echo "Error: SERVER_HOST secret is not set"
            exit 1
          fi

          # Setup SSH key if provided
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Setting up SSH private key..."
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            eval $(ssh-agent -s)
            ssh-add ~/.ssh/id_rsa
          else
            echo "Warning: SSH_PRIVATE_KEY secret is not set"
          fi

      - name: Deploy to server
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🚀 Deploying to production server..."

          # Deploy code to server
          if [ -n "${{ secrets.SERVER_USER }}" ] && [ -n "${{ secrets.SERVER_HOST }}" ]; then
            echo "Deploying to ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}"
            rsync -avz --delete \
              --exclude='.git' \
              --exclude='venv' \
              --exclude='__pycache__' \
              --exclude='*.pyc' \
              --exclude='.env' \
              --exclude='logs' \
              --exclude='media' \
              --exclude='static' \
              ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/bhavani/
          else
            echo "Error: SERVER_USER or SERVER_HOST secrets are not set"
            exit 1
          fi

          echo "✅ Code deployed successfully!"

      - name: Run deployment script on server
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🔧 Running deployment script on server..."

          # Run the deployment script on the server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /var/www/bhavani
            chmod +x deploy.sh
            ./deploy.sh
          EOF

          echo "✅ Deployment script completed!"

      - name: Fix database issues
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🔧 Fixing database issues..."

          # Run the database fix script on the server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /var/www/bhavani
            source venv/bin/activate
            python fix_payment_orders.py
          EOF

          echo "✅ Database fix completed!"

      - name: Restart services
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🔄 Restarting services..."

          # Restart services on server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            sudo systemctl restart redis-server
            
            # Restart supervisor if available
            if command -v supervisorctl &> /dev/null; then
              sudo supervisorctl restart courseapp:* || echo "Supervisor not configured"
            fi
            
            # Restart gunicorn if running as systemd service
            sudo systemctl restart gunicorn || echo "Gunicorn not running as systemd service"
            
            # Restart nginx
            sudo systemctl restart nginx || echo "Nginx restart failed"
          EOF

          echo "✅ Services restarted successfully!"
