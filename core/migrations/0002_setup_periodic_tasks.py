# Generated by Django 5.2 on 2025-05-06 14:06

from django.db import migrations


def setup_periodic_tasks(apps, schema_editor):
    IntervalSchedule = apps.get_model('django_celery_beat', 'IntervalSchedule')
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')
    
    import json
    
    # Create schedule for daily tasks
    daily_schedule, created = IntervalSchedule.objects.get_or_create(
        every=1,
        period='days',  # Note: Use string instead of IntervalSchedule.DAYS in migrations
    )
    
    # Schedule subscription expiry reminders (runs daily)
    PeriodicTask.objects.get_or_create(
        name='Check for expiring subscriptions',
        task='core.tasks.send_subscription_expiry_reminder',
        interval=daily_schedule,
        args=json.dumps([]),
        kwargs=json.dumps({}),
    )
    
    # Schedule deactivation of expired subscriptions (runs daily)
    PeriodicTask.objects.get_or_create(
        name='Deactivate expired subscriptions',
        task='core.tasks.deactivate_expired_subscriptions',
        interval=daily_schedule,
        args=json.dumps([]),
        kwargs=json.dumps({}),
    )

def reverse_func(apps, schema_editor):
    PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')
    PeriodicTask.objects.filter(name='Check for expiring subscriptions').delete()
    PeriodicTask.objects.filter(name='Deactivate expired subscriptions').delete()


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0001_initial'),  # Make sure this points to your previous migration
        ('django_celery_beat', '0001_initial'),  # Make sure celery beat migrations are applied first
    ]

    operations = [
        migrations.RunPython(setup_periodic_tasks, reverse_func),
    ]